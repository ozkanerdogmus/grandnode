@model ProductDetailsModel
@using Microsoft.AspNetCore.Http.Extensions
@inject SeoSettings seoSettings
@{
    Layout = "_ColumnsOne";

    //title, meta
    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, this.Url.ActionContext.HttpContext.Request.Scheme);
        Html.AddCanonicalUrlParts(productUrl);
    }

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(Model.MetaDescription) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image:url\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + this.Url.ActionContext.HttpContext.Request.GetEncodedUrl() + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(Model.MetaDescription) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + this.Url.ActionContext.HttpContext.Request.GetEncodedUrl() + "\" />");
    }
    Html.AppendScriptParts(ResourceLocation.Footer, string.Format("~/Themes/ScrollTheme/Content/js/product.js"));
}

@await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_after_breadcrumb", additionalData = Model.Id })
<div class="page product-details-page product-standard px-3">
        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_top", additionalData = Model.Id })
        <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
            <div itemscope itemtype="http://schema.org/Product" data-productid="@Model.Id">
                <div class="item-container col-lg-10 col-12 px-0">
                    <div class="row mx-0">
                        <div class="product-share">
                            <partial name="_ShareButton" model="Model" />
                        </div>
                        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_before_pictures", additionalData = Model.Id })
                        <!--product pictures-->
                        <partial name="_ProductDetailsPictures" model="Model" />
                        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_after_pictures", additionalData = Model.Id })
                        <div class="overview col-12 col-md-6 col-lg-7 col-xl-5">
                            <div class="inside-overview">
                                <!--product breadcrumb-->
                                <partial name="_ProductBreadcrumb" model="Model.Breadcrumb" />
                                <partial name="_Discontinued" model="Model" />
                                <h2 class="generalTitle" itemprop="name">
                                    @Model.Name
                                </h2>
                                <div class="col-lg-12 px-0">
                                    @{
                                        var dataDictPrice = new ViewDataDictionary(ViewData);
                                        dataDictPrice.TemplateInfo.HtmlFieldPrefix = string.Format("price_{0}", Model.Id);
                                        <partial name="_ProductTierPrices" model="Model.TierPrices" />
                                    }
                                </div>
                                <div class="col-lg-12 px-0">
                                    <partial name="_ProductPrice" model="Model.ProductPrice" view-data="dataDictPrice" />
                                </div>
                                @if (!String.IsNullOrEmpty(Model.ShortDescription))
                                {
                                    <div class="short-description generalMarginSupporter">
                                        @Html.Raw(Model.ShortDescription)
                                    </div>
                                }
                                @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_overview_top", additionalData = Model.Id })
                                <!--product reviews-->
                                <partial name="_ProductReviewOverview" model="Model.ProductReviewOverview" />
                                <!--manufacturers-->
                                <partial name="_ProductManufacturers" model="Model.ProductManufacturers" />
                                <!--availability-->
                                <partial name="_Availability" model="Model" />
                                <!--SKU, MAN, GTIN, vendor-->
                                <partial name="_SKU_Man_GTIN_Ven" model="Model" />
                                <!--delivery-->
                                <partial name="_DeliveryInfo" model="Model" />
                                <!--sample download-->
                                <partial name="_DownloadSample" model="Model" />
                                <!--product bundles-->
                                <partial name="_ProductBundles" model="Model" />
                                <!--attributes-->
                                @{
                                    var dataDictAttributes = new ViewDataDictionary(ViewData);
                                    dataDictAttributes.TemplateInfo.HtmlFieldPrefix = string.Format("attributes_{0}", Model.Id);
                                    <partial name="_ProductAttributes" model="Model.ProductAttributes" view-data="dataDictAttributes" />
                                }
                                <!--gift card-->
                                @{
                                    var dataDictGiftCard = new ViewDataDictionary(ViewData);
                                    dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = string.Format("giftcard_{0}", Model.Id);
                                    <partial name="_GiftCardInfo" model="Model.GiftCard" view-data="dataDictGiftCard" />
                                }
                                <!--reservation info-->
                                @if (Model.ProductType == ProductType.Reservation)
                                {
                                    var dataDictReservation = new ViewDataDictionary(ViewData);
                                    dataDictReservation.TemplateInfo.HtmlFieldPrefix = string.Format("reservation_{0}", Model.Id);
                                    <partial name="_ReservationInfo" model="Model" view-data="dataDictReservation" />
                                }
                                <!--price & add to cart-->
                                <div class="col-12 overview-buttons generalMarginSupporter">
                                    <div class="row">
                                        <div class="col-lg-12 generalAdToCart px-0 mb-3">
                                            <!--auction-->
                                            @if (Model.ProductType == ProductType.Auction)
                                            {
                                                var dataDictAuction = new ViewDataDictionary(ViewData);
                                                dataDictAuction.TemplateInfo.HtmlFieldPrefix = string.Format("auction_{0}", Model.Id);
                                                <partial name="_AuctionInfo" model="Model" view-data="dataDictAuction" />
                                            }
                                            @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_inside_overview_buttons_before", additionalData = Model.Id })
                                            @{
                                                var dataDictAddToWishlist = new ViewDataDictionary(ViewData);
                                                dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = string.Format("addtocart_{0}", Model.Id);
                                                var dataDictAddToCart = new ViewDataDictionary(ViewData);
                                                dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = string.Format("addtocart_{0}", Model.Id);
                                            }
                                            <div class="btn-group w-100">
                                                <partial name="_AddToCart" model="Model.AddToCart" view-data="dataDictAddToCart" />
                                            </div>
                                            <div class="btn-group product-simple-share my-2 d-inline-flex flex-nowrap w-100">
                                                @if (Model.ProductType == ProductType.SimpleProduct)
                                                {
                                                    <partial name="_AddToWishlist" model="Model.AddToCart" view-data="dataDictAddToWishlist" />
                                                    <partial name="_CompareProductsButton" model="Model" />
                                                }
                                                <partial name="_ProductEmailAFriendButton" model="Model" />
                                                <partial name="_ProductAskQuestionButton" model="Model" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_inside_overview_buttons_after", additionalData = Model.Id })

                                @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_overview_bottom", additionalData = Model.Id })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12 px-0 product-tabs-container">
                        <ul class="nav nav-tabs product-tabs" id="myTab" role="tablist">
                            <li class="nav-item">
                                <a class="nav-link active" id="desc-tab" data-toggle="tab" href="#desc" role="tab" aria-controls="desc" aria-selected="true" title="@T("Products.Description")"><span class="d-none d-md-block">@T("Products.Description")</span><span class="d-md-none d-block lnr linearicons-clipboard-text"></span></a>
                            </li>
                            @if (Model.ProductTags.Any())
                            {
                                <li class="nav-item">
                                    <a class="nav-link" id="tags-tab" data-toggle="tab" href="#tags" role="tab" aria-controls="tags" aria-selected="false" title="@T("Products.Tags")"><span class="d-none d-md-block">@T("Products.Tags")</span><span class="d-md-none d-block lnr linearicons-tags"></span></a>
                                </li>
                            }
                            @if (Model.ProductSpecifications.Any())
                            {
                                <li class="nav-item">
                                    <a class="nav-link" id="spec-tab" data-toggle="tab" href="#spec" role="tab" aria-controls="spec" aria-selected="false" title="@T("Products.Specs")"><span class="d-none d-md-block">@T("Products.Specs")</span><span class="d-md-none d-block lnr linearicons-chart-settings"></span></a>
                                </li>
                            }
                            @if (Model.ProductReviewOverview.AllowCustomerReviews)
                            {
                                <li class="nav-item">
                                    <a class="nav-link" id="review-tab" data-toggle="tab" href="#review" role="tab" aria-controls="spec" aria-selected="false" title="@T("Products.Reviews") (@Model.ProductReviewOverview.TotalReviews)"><span class="d-none d-md-block">@T("Products.Reviews") (@Model.ProductReviewOverview.TotalReviews)</span><span class="d-md-none d-block lnr linearicons-folder-star"></span></a>
                                </li>
                            }
                            @if (Model.AskQuestionOnProduct)
                            {
                                <li class="nav-item">
                                    <a class="nav-link" id="contact-tab" data-toggle="tab" href="#contact" role="tab" aria-controls="contact" aria-selected="false" title="@T("Products.ContactUs")"><span class="d-none d-md-block">@T("Products.ContactUs")</span><span class="d-md-none d-block lnr linearicons-envelope-open"></span></a>
                                </li>
                            }
                        </ul>
                        <div class="tab-content" id="product_tab_content">
                            <div class="tab-pane fade show active full-description" id="desc" role="tabpanel" aria-labelledby="desc-tab" itemprop="description">@Html.Raw(Model.FullDescription)</div>
                            @if (Model.ProductTags.Any())
                            {
                                <div class="tab-pane fade" id="tags" role="tabpanel" aria-labelledby="tags-tab"><partial name="_ProductTags" model="Model.ProductTags" /></div>
                            }
                            @if (Model.ProductSpecifications.Any())
                            {
                                <div class="tab-pane fade" id="spec" role="tabpanel" aria-labelledby="spec-tab"><partial name="_ProductSpecifications" model="Model.ProductSpecifications" /></div>
                            }
                            @if (Model.ProductReviewOverview.AllowCustomerReviews)
                            {
                                <div class="tab-pane fade" id="review" role="tabpanel" aria-labelledby="review-tab">
                                    @await Component.InvokeAsync("ProductReviews", new { productId = Model.Id })
                                </div>
                            }
                            @if (Model.AskQuestionOnProduct)
                            {
                                <div class="tab-pane fade" id="contact" role="tabpanel" aria-labelledby="contact-tab"><partial name="_AskQuestionOnProduct" model="Model.ProductAskQuestion" /></div>
                            }
                        </div>
                    </div>
                </div>

                @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_before_collateral", additionalData = Model.Id })
                @await Component.InvokeAsync("ProductsAlsoPurchased", new { productId = Model.Id })
                @await Component.InvokeAsync("RelatedProducts", new { productId = Model.Id })
                </div>
        </form>
        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_bottom", additionalData = Model.Id })
</div>
<div class="modal fade" id="subscribe-modal-form" tabindex="-1" role="dialog" aria-labelledby="subscribe-modal-formTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modal-subscribe">
                @T("BackInStockSubscriptions.PleaseWait")
            </div>
        </div>
    </div>
</div>
<script asp-location="Footer">
    $('.add-to-compare-list-button, .ask-a-question-button, .email-a-friend-button').tooltip({
        boundary: 'window',
        template: '<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>'
    });
</script>