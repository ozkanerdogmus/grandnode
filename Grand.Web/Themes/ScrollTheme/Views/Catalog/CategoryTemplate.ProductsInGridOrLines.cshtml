@model CategoryModel
@inject SeoSettings seoSettings
@inject CommonSettings commonSettings
@{
    Layout = "_ColumnsTwo";
    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);

    var canonicalUrlsEnabled = seoSettings.CanonicalUrlsEnabled;
    if (canonicalUrlsEnabled)
    {
        var categoryUrl = Url.RouteUrl("Category", new { SeName = Model.SeName }, this.Url.ActionContext.HttpContext.Request.Scheme);
        Html.AddCanonicalUrlParts(categoryUrl);
    }
    Html.AppendScriptParts(ResourceLocation.Footer, string.Format("~/Themes/ScrollTheme/Content/js/catalog.js"));
    Html.AppendScriptParts(ResourceLocation.Footer, string.Format("~/Themes/ScrollTheme/Content/js/jquery.cookie.js"));

}

@*category breadcrumb*@
@section Breadcrumb
{
    @if (Model.DisplayCategoryBreadcrumb)
    {
        
        var count = 0;
        
        <ol class="breadcrumb" itemscope itemtype="http://schema.org/BreadcrumbList">
            <li class="breadcrumb-item">
                <a href="@Url.RouteUrl("HomePage")" title="@T("Categories.Breadcrumb.Top")"><span class="lnr linearicons-home4"></span></a>
            </li>
            @foreach (var cat in Model.CategoryBreadcrumb)
            {
                count++;
                var isLastCategory = cat.Id == Model.Id;
                <li class="breadcrumb-item active" itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
                    @if (isLastCategory)
                    {
                        <strong class="current-item" itemprop="name">@cat.Name</strong>
                        <span itemprop="item" itemscope itemtype="http://schema.org/Thing"
                              id="@Url.RouteUrl("Category", new {SeName = cat.SeName})">
                        </span>
                    }
                    else
                    {
                        <a href="@Url.RouteUrl("Category", new { SeName = cat.SeName })" title="@cat.Name" itemprop="item">
                            <span itemprop="name">@cat.Name</span>
                        </a>                        
                    }
                    <meta itemprop="position" content="@count" />
                </li>

            }
        </ol>
        @await Component.InvokeAsync("Widget", new { widgetZone = "categorydetails_after_breadcrumb", additionalData = Model.Id })

    }
}
<div class="page category-page">
    @await Component.InvokeAsync("Widget", new { widgetZone = "categorydetails_top", additionalData = Model.Id })
    @*description*@
    @if (!String.IsNullOrWhiteSpace(Model.Description))
    {
        @*<div class="card category-description">
            <div class="card-body">
                <h2 class="card-title m-0">
                    @Html.Raw(Model.Description)
                </h2>
            </div>
        </div>*@
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = "categorydetails_before_subcategories", additionalData = Model.Id })
    @*subcategories*@
    @if (Model.SubCategories.Any())
    {
        <div class="swiper-container sub-categories">
            <div class="swiper-wrapper">
                @foreach (var item in Model.SubCategories)
                {
                    <div class="swiper-slide">
                        <div class="card">
                            <div class="list-picture">
                                <a href="@Url.RouteUrl("Category", new { SeName = item.SeName })" title="@item.PictureModel.Title">
                                    <img class="img-fluid swiper-lazy" alt="@item.PictureModel.AlternateText" data-src="@item.PictureModel.ImageUrl" title="@item.PictureModel.Title" />
                                    <span class="swiper-lazy-preloader"></span>
                                </a>
                            </div>
                            <div class="list-title mt-2">
                                <h3 class="h5 card-title m-0 p-0">
                                    <a href="@Url.RouteUrl("Category", new { SeName = item.SeName })">
                                        @item.Name
                                    </a>
                                </h3>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = "categorydetails_before_featured_products", additionalData = Model.Id })
    @*featured products*@
    @if (Model.FeaturedProducts.Any())
    {
        <div class="col-12 product-grid featured-product-grid px-0">
            <h5 class="generalTitle mt-5">
                <span>@T("Products.FeaturedProducts")</span>
            </h5>
            <div class="nav-buttons absolute">
                <div class="custom-nav-button prev"><span class="linearicons-chevron-left"></span></div>
                <div class="custom-nav-button next"><span class="linearicons-chevron-right"></span></div>
            </div>
            <div class="swiper-container featuredProd">
                <div class="swiper-wrapper">
                    @foreach (var item in Model.FeaturedProducts)
                    {
                        <div class="swiper-slide mb-3">
                            <partial name="_ProductBoxSwiper" model="item" />
                        </div>
                    }
                </div>
            </div>
        </div>
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = "categorydetails_after_featured_products", additionalData = Model.Id })

    <h2 class="generalTitle f38 text-center">@Model.Name</h2>

    @if (Model.Products.Any())
    {
        @await Component.InvokeAsync("Widget", new { widgetZone = "categorydetails_before_filters", additionalData = Model.Id })

        <partial name="_CatalogSelectors" model="Model.PagingFilteringContext" />

        @await Component.InvokeAsync("Widget", new { widgetZone = "categorydetails_before_product_list", additionalData = Model.Id })

        if (Model.PagingFilteringContext.ViewMode == "grid")
        {
            <div class="subCategoryList">
                <div class="row-product product-list-container">
                    @foreach (var product in Model.Products)
                    {
                        <div class="col-xl-2 col-lg-3 col-md-4 col-sm-6 col-6 product-container mb-3">
                            <partial name="_ProductBox" model="product" />
                        </div>
                    }
                </div>

                @{
                    var pager = Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber");
                }
                @if (!pager.IsEmpty())
                {
                    <nav aria-label="Page navigation">
                        @pager
                    </nav>
                }
                @await Component.InvokeAsync("Widget", new { widgetZone = "categorydetails_bottom", additionalData = Model.Id })
            </div>
        }
        else
        {
            <div class="row">
                    @foreach (var product in Model.Products)
                    {
                        <div class="col-6">
                            <partial name="_ProductBoxList" model="product" />
                        </div>
                    }
                    @{
                        var pager = Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber");
                    }
                    @if (!pager.IsEmpty())
                    {
                        <nav aria-label="Page navigation">
                            @pager
                        </nav>
                    }
                    @await Component.InvokeAsync("Widget", new { widgetZone = "categorydetails_bottom", additionalData = Model.Id })
            </div>

        }
    }
    else {
            <div class="no-data alert alert-danger text-danger">No product's available.</div>
            <a class="js-offcanvas-trigger filter-button d-none" data-offcanvas-trigger="leftSide" href="#leftSide">
                <span class="filter-menu-item">
                    <span class="medium-line filter-line"></span>
                    <span class="short-line filter-line"></span>
                    <span class="long-line filter-line"></span>
                </span>
                <span class="filter-name">@T("catalog.selectors.fiters")</span>
            </a>
    }
</div>
@section filters
    {
    @*filtering*@
    @if (Model.PagingFilteringContext.PriceRangeFilter.Enabled)
    {
        <partial name="_FilterPriceBox" model="Model.PagingFilteringContext.PriceRangeFilter" />
    }
    @*filtering*@
    @if (Model.PagingFilteringContext.SpecificationFilter.Enabled)
    {
        <partial name="_FilterSpecsBox" model="Model.PagingFilteringContext.SpecificationFilter" />
    }
}