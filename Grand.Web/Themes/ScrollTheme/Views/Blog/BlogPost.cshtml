@model BlogPostModel
@using Grand.Web.Models.Blogs;
@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Title);
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
}
@section left {
    @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_blog_before" })
    @await Component.InvokeAsync("BlogCategories")
    @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_before_blog_archive" })
    @await Component.InvokeAsync("BlogMonths")
    @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_after_blog_archive" })
    @await Component.InvokeAsync("BlogTags")
    @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_blog_after" })
}
<div class="page blogpost-page mt-3">
    @await Component.InvokeAsync("Widget", new { widgetZone = "blogpost_page_top", additionalData = Model.Id })
    <a class="js-offcanvas-trigger filter-button" data-offcanvas-trigger="leftSide" href="#leftSide">
        <span class="filter-menu-item">
            <span class="medium-line filter-line"></span>
            <span class="short-line filter-line"></span>
            <span class="long-line filter-line"></span>
        </span>
        <span class="filter-name">@T("Blog") @T("catalog.selectors.fiters")</span>
    </a>
    <h2 class="generalTitle text-center">
        <span>@Model.Title</span>
    </h2>
    <div class="news-item">
        @if (!string.IsNullOrEmpty(Model.PictureModel.ImageUrl))
        {
            <div class="image-container with-img mb-3">
                <img class="img-fluid pt-0" alt="@Model.PictureModel.AlternateText" src="@Model.PictureModel.ImageUrl" title="@Model.PictureModel.Title">
                <div class="post-date">
                    <span class="day">@Model.CreatedOn.ToString("dd")</span>
                    <span class="month">@Model.CreatedOn.ToString("MMM")</span>
                </div>
            </div>

            @await Component.InvokeAsync("Widget", new { widgetZone = "blogpost_page_before_body", additionalData = Model.Id })


    @Html.Raw(Model.Body)



}
        else
        {
            <div class="image-container no-img"></div>
            <div class="news-content no-img">
                <div class="news-date mt-0">
                    <span class="day">@Model.CreatedOn.ToString("dd")</span>
                    <span class="month">@Model.CreatedOn.ToString("MMM")</span>
                </div>
                @await Component.InvokeAsync("Widget", new { widgetZone = "blogpost_page_before_body", additionalData = Model.Id })
                <div class="desc">
                    @Html.Raw(Model.Body)
                </div>
            </div>
        }
    </div>


    @if (Model.Tags.Any())
    {
        <div class="tags generalMarginSupporter">
            <label>@T("Blog.Tags"):</label>
            @for (int i = 0; i < Model.Tags.Count; i++)
            {
                var tag = Model.Tags[i];
                <a class="btn btn-outline-secondary" href="@Url.RouteUrl("BlogByTag", new {tag = tag})">@tag</a>
            }
        </div>
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = "blogpost_page_before_comments", additionalData = Model.Id })
    @if (Model.AllowComments)
    {
        <div class="fieldset new-comment generalMarginSupporter d-flex flex-column w-100" id="comments">
            <h4 class="generalTitle no-icon text-center"><span>@T("Blog.Comments.LeaveYourComment")</span></h4>
            <div class="notifications">
                <div asp-validation-summary="ModelOnly" class="message-error"></div>
                @{
                    var result = TempData["Grand.blog.addcomment.result"] as string;
                }
                @if (!String.IsNullOrEmpty(result))
                {
                    <div class="result alert alert-success text-success">@result</div>
                }
            </div>
            <form asp-route="BlogPost" asp-route-sename="@Model.SeName" method="post">
                <div class="form-fields">
                    <div class="form-group">
                        <label asp-for="AddNewComment.CommentText" class="col-form-label">@T("Blog.Comments.CommentText"):</label>
                        <textarea asp-for="AddNewComment.CommentText" class="enter-comment-text form-control"></textarea>
                        <span asp-validation-for="AddNewComment.CommentText"></span>
                    </div>
                    @if (Model.AddNewComment.DisplayCaptcha)
                    {
                        <div class="captcha-box">
                            <captcha />
                        </div>
                    }
                </div>
                <div class="buttons text-xs-center text-md-left generalMarginSupporter">
                    <input type="submit" name="add-comment" class="btn btn-primary blog-post-add-comment-button" value="@T("Blog.Comments.SubmitButton")" />
                </div>
            </form>
        </div>
        if (Model.Comments.Any())
        {
            <div class="comment-list">
                <h4 class="generalTitle text-center no-icon"><span>@T("Blog.Comments")</span></h4>
                <div class="comments">
                    @foreach (var comment in Model.Comments)
                    {
                        <div class="card comment blog-comment text-center text-sm-left mb-5">
                            @if (comment.AllowViewingProfiles)
                            {
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <h5 class="mb-0"><a href="@Url.RouteUrl("CustomerProfile", new {id = comment.CustomerId})" class="username">@(comment.CustomerName)</a></h5>
                                    <div class="comment-time">
                                        <span class="linearicons-calendar-31 lnr"></span>
                                        <span class="stat-value">@comment.CreatedOn.ToString("g")</span>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <h5 class="username mb-0">@(comment.CustomerName)</h5>
                                    <div class="comment-time">
                                        <span class="linearicons-calendar-31 lnr"></span>
                                        <span class="stat-value">@comment.CreatedOn.ToString("g")</span>
                                    </div>
                                </div>
                            }
                            <div class="card-body row">
                                @if (!String.IsNullOrEmpty(comment.CustomerAvatarUrl))
                                {
                                    <div class="d-flex justify-content-center user-info mx-auto mb-sm-0 mb-3">
                                        <div class="avatar">
                                            @if (comment.AllowViewingProfiles)
                                            {
                                                <a href="@Url.RouteUrl("CustomerProfile", new {id = comment.CustomerId})" class="avatar-img-link">
                                                    <img src="@(comment.CustomerAvatarUrl)" class="avatar-img" alt="avatar" />
                                                </a>
                                            }
                                            else
                                            {
                                                <img src="@(comment.CustomerAvatarUrl)" class="avatar-img" alt="avatar" />
                                            }
                                        </div>
                                    </div>
                                }
                                <div class="col-12 col-sm-9 comment-content">
                                    <div class="comment-body text-center text-sm-left">
                                        @Html.Raw(Grand.Core.Html.HtmlHelper.FormatText(comment.CommentText, false, true, false, false, false, false))
                                    </div>
                                </div>
                                @await Component.InvokeAsync("Widget", new { widgetZone = "blogpost_page_inside_comment", additionalData = comment.Id })
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = "blogpost_page_after_comments", additionalData = Model.Id })
    @await Component.InvokeAsync("Widget", new { widgetZone = "blogpost_page_bottom", additionalData = Model.Id })
</div>
